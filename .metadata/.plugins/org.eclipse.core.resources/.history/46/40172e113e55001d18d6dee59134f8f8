package day8;

public class MainDay8 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		double input = 50;
		double myResult = getSquareRoot(input);
		double exactResult = Math.sqrt(input);
		System.out.println("My SquareRoot result is: " + myResult);
		System.out.println("Exact result is: " + exactResult);
		// myResult - 0.01 <= Math.sqrt <= myResult + 0.01
		System.out
				.println("Is my result correct: " + (myResult - exactResult <= 0.01 && exactResult - myResult <= 0.01));
	}

	public static double getSquareRoot(double input) {
		double upperLimit = input;
		double lowerLimit = 0;
		if (input == 0 || input == 1)
			return input;
		while (true) {
			/*
			 * 1 2 ... m ... m^2
			 * (1)
			 * from m^2 to m, we keep divide m^2 by 2 each time until it reaches upper limit of m
			 * m^2 / 2	1step
			 * m^2 / 4	1step
			 * m^2 / 8	1step
			 * ...
			 * m^2 / m	1step
			 * -> total step from 2 to m: log2(m)
			 * (2)
			 * from 1 to m, there is also a log2(m) steps to multiply 1 by 2 until it reaches the lower limit of m
			 * (1) and (2) -> 2log2(m) = 2log2(sqrtN) = 2log2(N^1/2) = log2(N) steps to lower the range to 
			 * 
			 * 
			 */
			double middle = getMiddleNumber(upperLimit, lowerLimit);
			System.out.println("Lower: " + lowerLimit + " - Middle: " + middle + " - Upper: " + upperLimit);
			if ((int) middle * (int) middle == input)
				return (int) middle;

			if (isCorrectSqrtNum(middle, input) == 0)
				return middle;

			if (isCorrectSqrtNum(middle, input) == -1)
				lowerLimit = middle;
			else
				upperLimit = middle;
		}
	}

	public static int isCorrectSqrtNum(double sqrtNumber, double number) {
		// (a-0.01)^2 = a^2 - 0.02a + 0.0001 <= number <= a^2 + 0.02a + 0.001 =
		// (a+0.01)^2
		if ((sqrtNumber * sqrtNumber) <= (number + 0.02 * sqrtNumber - 0.0001)
				&& (number - 0.02 * sqrtNumber - 0.0001) <= sqrtNumber * sqrtNumber) {
			return 0;
		} else if (sqrtNumber * sqrtNumber < number)
			return -1;
		else
			return 1;
	}

	public static double getMiddleNumber(double upperLimit, double lowerLimit) {
		return (upperLimit + lowerLimit) / 2;
	}

}
