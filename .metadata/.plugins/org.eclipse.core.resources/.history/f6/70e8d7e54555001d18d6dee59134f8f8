package day8;

public class MainDay8 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		double input = 10000;
		double myResult = getSquareRoot(input);
		double exactResult = Math.sqrt(input);
		System.out.println("My SquareRoot result is: " + myResult);
		System.out.println("Exact result is: " + exactResult);
		// myResult - 0.01 <= Math.sqrt <= myResult + 0.01
		System.out.println("Is my result correct: " + (myResult - exactResult <= 0.01 && exactResult - myResult <= 0.01));
	}

	public static double getSquareRoot(double input) {
		
		double upperLimit = input;
		double lowerLimit = 0;
		if(input < 1) {
			upperLimit = 1;
			lowerLimit = input;
		}
		else if (input == 0 || input == 1)
			return input;
		while (true) {
			/*
			 * when N > 1
			 * 1 2 .. m .. m^2
			 * if we keep dividing N = m^2 by 2, like m^2/2, m^2/4, m^2/8 .. m^2/m, it will take log2(m) steps to reach from N to m -> log2(sqrtN) = 1/2 log(N)
			 * if we keep multiply 1 by 2, like 1*2, 1*4, 1*8 ... 1*m, it will also take log2(m) steps to reach 1 to m -> log2(sqrtN) = 1/2 log(N)
			 * so it will take 1/2 log2(N) + 1/2 log2(N) = log2(N) to reach upperLimit m and lowerLimit m
			 * from here if m is an integer it will take 
			 * 
			 * 
			 */
			double middle = getMiddleNumber(upperLimit, lowerLimit);
			System.out.println("Lower: " + lowerLimit + " - Middle: " + middle + " - Upper: " + upperLimit);
			if ((int) middle * (int) middle == input)
				return (int) middle;

			if (isCorrectSqrtNum(middle, input) == 0)
				return middle;

			if (isCorrectSqrtNum(middle, input) == -1)
				lowerLimit = middle;
			else
				upperLimit = middle;
		}
	}

	public static int isCorrectSqrtNum(double sqrtNumber, double number) {
		// (a-0.01)^2 = a^2 - 0.02a + 0.0001 <= number <= a^2 + 0.02a + 0.001 = (a+0.01)^2
		if ((sqrtNumber * sqrtNumber) <= (number + 0.02 * sqrtNumber - 0.0001)
				&& (number - 0.02 * sqrtNumber - 0.0001) <= sqrtNumber * sqrtNumber) {
			return 0;
		} else if (sqrtNumber * sqrtNumber < number)
			return -1;
		else
			return 1;
	}

	public static double getMiddleNumber(double upperLimit, double lowerLimit) {
		return (upperLimit + lowerLimit) / 2;
	}

}
