package day5;

import java.util.ArrayList;
import java.util.Scanner;

public class MainDay5 {
	static Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		Semester semOne2021 = new Semester("sem012021", "2021-2022", 1);
		Semester semTwo2021 = new Semester("sem022021", "2021-2022", 2);
		Semester[] semesters = {semOne2021, semTwo2021};
		Student phuocPham = new Student("student1", "Phuoc Pham");
		Subject math = new Subject("subject1", "Mathematics");
		Subject literature = new Subject("subject2", "Literature");
		Subject english = new Subject("subject3", "English");
		Examination math45mExam = new Examination("exam1", "45 Minutes Maths Exam", "student1", "sem012021", "subject1",
				2, 5.5);
		Examination mathFinalmExam = new Examination("exam2", "Final Semester Maths Exam", "student1", "sem012021",
				"subject1", 3, 9.0);
		Examination lit15mExam = new Examination("exam3", "15 Minutes Literature Exam ", "student1", "sem022021",
				"subject2", 1, 3.0);
		Examination litFinalmExam = new Examination("exam4", "Final Literature Exam", "student1", "sem022021",
				"subject2", 3, 8.5);
		Examination eng45mExam = new Examination("exam5", "45 Minutes English Exam", "student1", "sem022021",
				"subject3", 2, 10.0);
		Examination engFinalExam = new Examination("exam6", "Final Semester English Exam", "student1", "sem022021",
				"subject3", 3, 6.5);
		Examination[] exams = { math45mExam, mathFinalmExam, lit15mExam, lit15mExam, eng45mExam, engFinalExam };
		Student[] students = { phuocPham };
		Student selectedStudent = getStudent(students);
		if (selectedStudent != null) {
			ArrayList<Examination> examinations = getExaminationsByStudentID(selectedStudent.getStudentID(), exams);
			ArrayList<Semester> semFromExam = getSemesterFromExamination(examinations, semesters);
			ArrayList<Subject> subjFromExam = getSubjectFromExamination(examinations);
			ArrayList<String> yearFromExam = getSchoolYearFromExamination(semFromExam, semesters);		
			System.out.println("Please select from the following School Year to view " + selectedStudent.getStudentName() + "'s Point Sheet: ");
			for(String year : yearFromExam) {
				System.out.println(year);
			}
			String selectedYear = scanner.nextLine();
			while(!yearFromExam.contains(selectedYear)) {
				System.out.println("Cannot find selected year in the list, please try again");
				selectedYear = scanner.nextLine();
			}
			System.out.println("Point Sheet");
			System.out.println("Student ID: " + selectedStudent.getStudentID() + " | Student Name: " + selectedStudent.getStudentName());
			System.out.println("Year: " + selectedYear);
			ArrayList<Semester> selectedSemesters = getSemestersBySchoolYear(selectedYear, semesters);
			


		}
		scanner.close();
	}

	public static Student getStudent(Student[] students) {
		for (Student s : students) {
			System.out.println("Student ID: " + s.getStudentID() + " | Student Name: " + s.getStudentName());
		}
		while (true) {
			System.out.print("Please enter either Student ID or Student Name you want to view student's Point Sheet: ");
			String studentID = scanner.nextLine();
			for (Student s : students) {
				if (studentID.equalsIgnoreCase(s.getStudentID()) || studentID.equalsIgnoreCase(s.getStudentName())) {
					return s;
				}
			}
			System.out.println("Cannot find the entered Student ID or Student Name in our system. Please try again");
		}
	}

	public static ArrayList<Examination> getExaminationsByStudentID(String studentID, Examination[] exams) {
		ArrayList<Examination> examninations = new ArrayList<Examination>();
		for (Examination e : exams) {
			if (studentID.equalsIgnoreCase(e.getStudentID()))
				examninations.add(e);
		}
		return examninations;
	}
	
	public static ArrayList<Semester> getSemesterFromExamination(ArrayList<Examination> examinations, Semester[] sems) {
		ArrayList<String> semesterIDs = new ArrayList<String>();
		ArrayList<Semester> semesters = new ArrayList<Semester>();
		for(Examination examination : examinations) {
			if (!semesterIDs.contains(examination.getSemesterID())) {
				semesterIDs.add(examination.getSemesterID());
				semesters.add(getSmesterByID(examination.getSemesterID(), sems));
			}
		}
		return semesters;
	}
	
	public static ArrayList<String> getSubjectFromExamination(ArrayList<Examination> examinations, Subject[] subjs){
		ArrayList<String> subjectIDs = new ArrayList<String>();
		ArrayList<Subject> subjects = new ArrayList<Subject>();
		for(Examination examination  : examinations) {
			if(!subjectIDs.contains(examination.getSubjectID())) {
				subjectIDs.add(examination.getSubjectID());
				subjects.add(getSubject(null, subjs))
			}
		}
		return subjects;
	}
	
	public static ArrayList<String> getSchoolYearFromExamination(ArrayList<String> semesterIDs, Semester[] semesters){
		ArrayList<String> schoolYears = new ArrayList<String>();
		for(String ID  : semesterIDs) {
			Semester s = getSmesterByID(ID, semesters);
			if(!schoolYears.contains(s.getSchoolYear()))
				schoolYears.add(s.getSchoolYear());
		}
		return schoolYears;
	}
	
	public static Semester getSmesterByID(String semesterID, Semester[] semesters) {
		for(Semester s : semesters) {
			if (semesterID.equalsIgnoreCase(s.getSemesterID()))
				return s;
		}
		return null;
	}
	
	public static ArrayList<Semester> getSemestersBySchoolYear(String schoolYear, Semester[] semesters){
		ArrayList<Semester> s = new ArrayList<Semester>();
		for(Semester sem: semesters) {
			if(schoolYear.equalsIgnoreCase(sem.getSchoolYear()))
				s.add(sem);
		}
		return s;
	}
	
	public static Subject getSubjectByID(String subjectID, Subject[] subjects) {
		for(Subject s : subjects) {
			if(subjectID.equalsIgnoreCase(s.getSubjectID()))
				return s;
		}
		return null;
	}


//	public static Student getStudent(Student[] students, String studentID) {
//		for (Student student : students) {
//			if (studentID.equalsIgnoreCase(student.getStudentID()))
//				return student;
//		}
//		return null;
//	}
}
