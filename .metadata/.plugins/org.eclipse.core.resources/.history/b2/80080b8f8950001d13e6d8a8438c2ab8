package day5;

import java.util.ArrayList;
import java.util.Scanner;

public class MainDay5 {
	static Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		Semester semOne2021 = new Semester("sem012021", "2021-2022", 1);
		Semester semTwo2021 = new Semester("sem022021", "2021-2022", 2);
		Semester[] semesters = { semOne2021, semTwo2021 };
		Student phuocPham = new Student("student1", "Phuoc Pham");
		Subject math = new Subject("subject1", "Toan");
		Subject literature = new Subject("subject2", "Van");
		Subject english = new Subject("subject3", "Anh");
		Subject[] subjects = { math, literature, english };
		Examination math45mExam = new Examination("exam1", "45'", "student1", "sem012021", "subject1",
				2, 5.5);
		Examination mathFinalmExam = new Examination("exam2", "Final", "student1", "sem012021",
				"subject1", 3, 9.0);
		Examination math15mExam = new Examination("exam3", "15'", "student1", "sem022021",
				"subject1", 1, 3.0);
		Examination litFinalmExam = new Examination("exam4", "Final", "student1", "sem022021",
				"subject2", 3, 8.5);
		Examination lit45mExam = new Examination("exam5", "45'", "student1", "sem022021",
				"subject2", 2, 10.0);
		Examination litFinalExam = new Examination("exam6", "15'", "student1", "sem022021",
				"subject2", 3, 6.5);
		Examination engFinalExam = new Examination("exam7", "Final", "student1", "sem012021",
				"subject3", 3, 10.0);
		Examination eng45mExam = new Examination("exam8", "45'", "student1", "sem012021",
				"subject3", 2, 9.5);
		Examination eng15m1Exam = new Examination("exam9", "15'", "student1", "sem012021",
				"subject3", 1, 4.5);
		Examination eng15m2Exam = new Examination("exam10", "15'", "student1", "sem012021",
				"subject3", 3, 7.5);
		Examination[] exams = { math45mExam, mathFinalmExam, math15mExam, litFinalmExam, lit45mExam, litFinalExam, engFinalExam, eng45mExam, eng15m1Exam, eng15m2Exam };
		Student[] students = { phuocPham };
		Student selectedStudent = getStudent(students);
		if (selectedStudent != null) {
			ArrayList<Examination> examinations = getExaminationsByStudentID(selectedStudent.getStudentID(), exams);
			ArrayList<Semester> semFromExam = getSemesterFromExamination(examinations, semesters);
			ArrayList<Subject> subjFromExam = getSubjectFromExamination(examinations, subjects);
			ArrayList<String> yearFromExam = getYearFromExamination(semFromExam);
			System.out.println("Please select from the following School Year to view "
					+ selectedStudent.getStudentName() + "'s Point Sheet: ");
			for (String year : yearFromExam) {
				System.out.println(year);
			}
			String selectedYear = scanner.nextLine();
			while (!yearFromExam.contains(selectedYear)) {
				System.out.println("Cannot find selected year in the list, please try again");
				selectedYear = scanner.nextLine();
			}	
			System.out.println("Point Sheet");
			System.out.println("Student ID: " + selectedStudent.getStudentID() + " | Student Name: "
					+ selectedStudent.getStudentName());
			System.out.println("Year: " + selectedYear);
			String space = "\t";
			ArrayList<String> points = getPointBySubjectPerSemester(subjFromExam, semFromExam, examinations, space);
			for(String row : points) {
				System.out.println(row);
			}
		}
		scanner.close();
	}

	public static Student getStudent(Student[] students) {
		for (Student s : students) {
			System.out.println("Student ID: " + s.getStudentID() + " | Student Name: " + s.getStudentName());
		}
		while (true) {
			System.out.print("Please enter either Student ID or Student Name you want to view student's Point Sheet: ");
			String studentID = scanner.nextLine();
			for (Student s : students) {
				if (studentID.equalsIgnoreCase(s.getStudentID()) || studentID.equalsIgnoreCase(s.getStudentName())) {
					return s;
				}
			}
			System.out.println("Cannot find the entered Student ID or Student Name in our system. Please try again");
		}
	}

	public static ArrayList<Examination> getExaminationsByStudentID(String studentID, Examination[] exams) {
		ArrayList<Examination> examninations = new ArrayList<Examination>();
		for (Examination e : exams) {
			if (studentID.equalsIgnoreCase(e.getStudentID()))
				examninations.add(e);
		}
		return examninations;
	}

	public static ArrayList<Semester> getSemesterFromExamination(ArrayList<Examination> examinations, Semester[] sems) {
		ArrayList<String> semesterIDs = new ArrayList<String>();
		ArrayList<Semester> semesters = new ArrayList<Semester>();
		for (Examination examination : examinations) {
			if (!semesterIDs.contains(examination.getSemesterID())) {
				semesterIDs.add(examination.getSemesterID());
				semesters.add(getSmesterByID(examination.getSemesterID(), sems));
			}
		}
		return semesters;
	}
	
	public static ArrayList<String> getYearFromExamination(ArrayList<Semester> semesters){
		ArrayList<String> schoolYears = new ArrayList<String>();
		for (Semester semester : semesters) {
			if (!schoolYears.contains(semester.getSchoolYear()))
				schoolYears.add(semester.getSchoolYear());
		}
		return schoolYears;		
	}

	public static ArrayList<Subject> getSubjectFromExamination(ArrayList<Examination> examinations, Subject[] subjs) {
		ArrayList<String> subjectIDs = new ArrayList<String>();
		ArrayList<Subject> subjects = new ArrayList<Subject>();
		for (Examination examination : examinations) {
			if (!subjectIDs.contains(examination.getSubjectID())) {
				subjectIDs.add(examination.getSubjectID());
				subjects.add(getSubjectByID(examination.getSubjectID(), subjs));
			}
		}
		return subjects;
	}

	public static Semester getSmesterByID(String semesterID, Semester[] semesters) {
		for (Semester s : semesters) {
			if (semesterID.equalsIgnoreCase(s.getSemesterID()))
				return s;
		}
		return null;
	}


	public static Subject getSubjectByID(String subjectID, Subject[] subjects) {
		for (Subject s : subjects) {
			if (subjectID.equalsIgnoreCase(s.getSubjectID()))
				return s;
		}
		return null;
	}
	
	public static ArrayList<Semester> getSemesterByYear(String year, Semester[] semesters){
		ArrayList<Semester> sems = new ArrayList<Semester>();
		for(Semester semester : semesters) {
			if(year.equalsIgnoreCase(semester.getSchoolYear()))
				sems.add(semester);
		}
		return sems;
	}
	
	public static char getGrade(double point) {
		if (point >= 9)
			return 'S';
		else if (point >= 8)
			return 'A';
		else if (point >= 7)
			return 'B';
		else if (point >= 6)
			return 'C';
		else if (point >= 5)
			return 'D';
		else
			return 'F';
	}
	
	public static ArrayList<String> getPointBySubjectPerSemester(ArrayList<Subject> subjects, ArrayList<Semester> semesters, ArrayList<Examination> examinations, String space){
		ArrayList<String> rows = new ArrayList<String>();
		int[] maxItemPerSem = new int[semesters.size()];
		for(int i = 0; i < semesters.size(); i++) {
			Semester semester = semesters.get(i);
			int maxRecordPerSubject = 0;
			for(Subject subject: subjects) {
				int count = 0;
				for(Examination examination : examinations) {
					if(subject.getSubjectID().equalsIgnoreCase(examination.getSubjectID()) && semester.getSemesterID().equalsIgnoreCase(examination.getSemesterID())) {
						++count;
					}
				}
				if(maxRecordPerSubject < count)
					maxRecordPerSubject = count;
			}
			maxItemPerSem[i] = maxRecordPerSubject;
		}
		String semesterHeader = "Mon" + space;
		for(int i = 0; i < maxItemPerSem.length; i++) {
			semesterHeader += "HK " + semesters.get(i).getSemester();
			for(int j = 1 ; j <= maxItemPerSem[i]; j++) {
				semesterHeader += space + space;
			}
		}
		semesterHeader += "Average";
		rows.add(semesterHeader);
		double sum = 0;
		for(Subject subject: subjects) {
			double dividend = 0;
			double divisor = 0;
			String row =  subject.getSubjectName() + space;
			for(int i = 0; i < semesters.size(); i++) {
				Semester semester = semesters.get(i);
				int foundRecordCount = 0;
				for(Examination examination : examinations) {
					if(subject.getSubjectID().equalsIgnoreCase(examination.getSubjectID()) && semester.getSemesterID().equalsIgnoreCase(examination.getSemesterID())) {
						row += examination.getExamName() + ": " + examination.getPoint() + space;
						dividend += examination.getPoint() * examination.getMultiplication();
						divisor += examination.getMultiplication(); 
						++foundRecordCount;
					}
				}
				for(int j = foundRecordCount; j < maxItemPerSem[i]; j++) {
					row += space + space;
				}
			}
			double average = Math.round(100.00*dividend/divisor)/100.00;
			sum += average;
			row += average;
			rows.add(row);
		}
		int totalItem = 0;
		for(int i = 0; i < maxItemPerSem.length; i++) {
			totalItem += maxItemPerSem[i];
		}
		System.out.println("Total: " + totalItem);
		String rowAverage = "";
		for(int i = 0; i < totalItem; i++) {
			rowAverage += space + space;
		}
		rowAverage += "Average: " + sum/subjects.size();
		rows.add(rowAverage);
		String rowGrade = "";
		for(int i = 0; i < totalItem; i++) {
			rowGrade += space + space;
		}
		rowGrade += "Grade: " + getGrade(sum/subjects.size());
		rows.add(rowGrade);
		return rows;
	}

	
//	public static ArrayList<Semester> getSemestersBySchoolYear(String schoolYear, Semester[] semesters) {
//		ArrayList<Semester> s = new ArrayList<Semester>();
//		for (Semester sem : semesters) {
//			if (schoolYear.equalsIgnoreCase(sem.getSchoolYear()))
//				s.add(sem);
//		}
//		return s;
//	}

//	public static Student getStudent(Student[] students, String studentID) {
//		for (Student student : students) {
//			if (studentID.equalsIgnoreCase(student.getStudentID()))
//				return student;
//		}
//		return null;
//	}
}
